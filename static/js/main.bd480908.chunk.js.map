{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.js","components/Filter/Filter.jsx","App.js","index.js","components/ContactsList/ContactsList.module.css"],"names":["module","exports","ContactListItem","id","name","number","onRemove","className","s","listItem","buttonDelete","onClick","ContactsList","contacts","length","map","contact","ContactForm","state","handleInputChange","e","currentTarget","value","setState","handleSubmitForm","preventDefault","validateForm","props","onSubmit","nanoid","reset","onChekunike","alert","this","form","type","placeholder","onChange","pattern","buttonForm","Component","Filter","filter","target","App","newContact","handleUniceContact","isContactThere","find","handleRemoveContact","handleFilterSearch","filterContacts","toLowerCase","includes","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd480908.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__YAX_S\",\"buttonForm\":\"ContactForm_buttonForm__1xJIZ\"};","import PropTypes from 'prop-types';\nimport s from './ContactsList.module.css';\n\nfunction ContactListItem({ id, name, number, onRemove }) {\n    return (\n        <li className={s.listItem}>\n            {name} : {number}{' '}\n            <button className={s.buttonDelete} onClick={() => onRemove(id)}>\n                delete\n            </button>\n        </li>\n    );\n}\n\nfunction ContactsList({ contacts, onRemove }) {\n    if (contacts.length === 0) return null;\n    return (\n        <ul>\n            {/* <h3>Contacts</h3> */}\n            {contacts.map(contact => (\n                <ContactListItem\n                    key={contact.id}\n                    {...contact}\n                    onRemove={onRemove}\n                />\n            ))}\n        </ul>\n    );\n}\n\nContactsList.propTypes = {\n    onRemove: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }),\n    ),\n};\nContactListItem.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n            id: PropTypes.string.isRequired,\n        }),\n    ),\n};\n\nexport default ContactsList;\n","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\n\nexport default class ContactForm extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleInputChange = e => {\n        const { name, value } = e.currentTarget;\n        this.setState({ [name]: value });\n    };\n\n    handleSubmitForm = e => {\n        e.preventDefault();\n        const { name, number } = this.state;\n        const isValidForm = this.validateForm();\n        if (isValidForm) {\n            this.props.onSubmit({ id: nanoid(), name, number });\n        } else return;\n        this.reset();\n    };\n    validateForm = () => {\n        const { name, number } = this.state;\n        const { onChekunike } = this.props;\n        if (!name || !number) {\n            alert('Empty field! Please fill');\n            return false;\n        }\n        return onChekunike(name);\n    };\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        const { name, number } = this.state;\n        return (\n            <form className={s.form} onSubmit={this.handleSubmitForm}>\n                <h3>Name</h3>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Enter name\"\n                    value={name}\n                    onChange={this.handleInputChange}\n                ></input>\n\n                <h3>Number</h3>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    placeholder=\"123-45-67\"\n                    value={number}\n                    onChange={this.handleInputChange}\n                ></input>\n                <button className={s.buttonForm} type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        );\n    }\n}\n","const Filter = ({ filter, onChange }) => {\n    return (\n        <input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            placeholder=\"Search by contacts\"\n            onChange={({ target }) => onChange(target.value)}\n        />\n    );\n};\nexport default Filter;\n","import { Component } from 'react';\r\nimport ContactsList from './components/ContactsList';\r\nimport ContactForm from './components/ContactForm';\r\nimport Filter from './components/Filter';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        contacts: [],\r\n        filter: '',\r\n    };\r\n\r\ncomponentDidMount() {\r\n    if (localStorage.getItem(\"contacts\") !== null) {\r\n      const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n      this.setState({ contacts: contacts });\r\n    }\r\n  }\r\n\r\ncomponentDidUpdate(prevProps, prevState) {\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n    handleSubmitForm = newContact => {\r\n        this.setState(({ contacts }) => ({\r\n            contacts: [...contacts, newContact],\r\n        }));\r\n    };\r\n\r\n    handleUniceContact = name => {\r\n        const { contacts } = this.state;\r\n        const isContactThere = contacts.find(contact => contact.name === name);\r\n        if (isContactThere) {\r\n            alert('Contact is exist');\r\n            return;\r\n        }\r\n        return !isContactThere;\r\n    };\r\n    handleRemoveContact = id =>\r\n        this.setState(({ contacts }) => ({\r\n            contacts: contacts.filter(contact => contact.id !== id),\r\n        }));\r\n\r\n    handleFilterSearch = filter => this.setState({ filter });\r\n\r\n    filterContacts = () => {\r\n        const { contacts, filter } = this.state;\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { filter } = this.state;\r\n        const filteredContacts = this.filterContacts();\r\n        return (\r\n            <>\r\n                <h2>Phonebook</h2>\r\n                <ContactForm\r\n                    onSubmit={this.handleSubmitForm}\r\n                    onChekunike={this.handleUniceContact}\r\n                />\r\n                <h2>Contacts</h2>\r\n                <h3>Find contacts by name</h3>\r\n                <Filter filter={filter} onChange={this.handleFilterSearch} />\r\n                <ContactsList\r\n                    contacts={filteredContacts}\r\n                    onRemove={this.handleRemoveContact}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"ContactsList_buttonDelete__Q-OEH\",\"listItem\":\"ContactsList_listItem__RYEvv\"};"],"sourceRoot":""}